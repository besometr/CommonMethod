////////////////////////////////////////////////////////////////////////////////
// Подсистема "Общие методы объектов".
//
// Описывает процедуры и функции общие, для ссылочных объектов конфигурации. 
// Среди них: 
//	* Создание пустой структуры объекта.
//	* Создание и Изменение объекта.
//	* Получение значений реквизитов 
//	и прочее.
//
// Подсистема подразумевает следующие варианты использования:
//	* В модуль менеджера каждого объекта метаданных, поддерживаемого подсистемой типа, в обязательном порядке
//		добавляются методы конструкторов. Шаблон находится в общем модуле "ОбщиеМетодыОбъектовШаблон". Процедуры и функции требуют 
//		минимальной адаптации к новому объекту.
//	* Вызов конструкторов доступен через прямое обращение к методам, расположенным в модуле менеджера объекта,
//		например: Документы.споГруз.СоздатьОбъект(СтруктураОбъекта);
//		В таком случае, выполнение метода будет осуществляться в том же контексте, что и его вызов.
//	* Вызов конструкторов доступен через единую точку входа, расположенную в данном модуле,
//		например: ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта); 
//		В таком случае необходимо дополнительно указывать полное имя объекта метаданных, 
//		для вызова соответствующих методов из модуля менеджера объекта. Контекст выполнения: Сервер.
//		
// Для неинтерактивного создания объектов в конфигурации необходимо использовать описанные конструкторы.
////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//Универсальные интерфейсы
//////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#КонецОбласти


//////////////////////////////////////////////////////////////
//Общие процедуры и функции
//////////////////////////////////////////////////////////////
#Область СлужебныйПрограммныйИнтерфейс

// СтруктураОбъекта
// Создает структуру реквизитов и табличных частей объекта. Состав необходимых реквизитов корректируется 
// с помощью параметра СтруктураРеквизитовДляПоиска. В качестве Значений ключей результирующей структуры используются пустые значения типов, 
// за исключением случаев, когда в качестве параметра СтруктураРеквизитовДляПоиска передается структура с заполненными значениями.
// Для табличных частей устанавливается пустой массив.
//
// Параметры:
//	ПустаяСсылка					- Ссылка	- Используется как значение по умолчанию для сформирванной структуры реквизитов объекта.
//	СтруктураРеквизитовДляПоиска	- Структура	- Необязательный. В качестве ключа передается имена реквизитов, 
//						                       	а в качестве значения (опционально) - значение реквизита.
//												Если значения заполены, они будут скопированы в результирующую структуру.
//				  					- Строка	- Необязательный. Имена реквизитов, перечисленные через запятую.
//	ТекстОшибки						- Строка	- Содержит описание ошибки, в случае возникновения оной.
//	Отказ							- Булево	- Признак возникновения ошибки выполнения.
//
// Возвращаемое значение:
//	Структура		- Описание объекта. В качестве ключа передаются имена реквизитов, а в качестве значения - значение реквизита.
//					Реквизиты с именами табличных частей заполнены пустыми массивами.
//	Неопределено	- Если не удалось получить объект метаданных по имени 
//					или найденный объект не поддерживается подсистемой "Общие методы объектов".
//
Функция СтруктураОбъекта(ПустаяСсылка, Знач СтруктураРеквизитовДляПоиска = Неопределено, ТекстОшибки = "", Отказ = Ложь)Экспорт   
	
	МетаданныеОбъекта = ПустаяСсылка.Метаданные();
	МетаданныеОбъектаРеквизиты = МетаданныеОбъекта.Реквизиты;
	МассивТабличныхЧастей = ТабличныеЧастиОбъекта(МетаданныеОбъекта.ПолноеИмя(), ТекстОшибки, Отказ);
	
	//Структура для возврата
	СтруктураОбъекта = Новый Структура();
	
	ЭтоСправочник		= Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка));
    ЭтоПланОбмена		= ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка));
    ЭтоПВХ				= ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка));
    ЭтоПланВидовРасчета	= ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка));
    ЭтоДокумент			= (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка)) ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка)));
    ЭтоЗадача			= Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ПустаяСсылка));
   		
	//Формируем список реквизитов объекта
	//Если передали список реквизитов строкой
    Если ТипЗнч(СтруктураРеквизитовДляПоиска) = Тип("Строка") И ЗначениеЗаполнено(СтруктураРеквизитовДляПоиска) Тогда

        //По переданной строке инициализируем структуру
        Попытка
            СтруктураРеквизитовДляПоиска = Новый Структура(СтруктураРеквизитовДляПоиска);
		Исключение
			ТекстОшибки	= "Не удалось создать структуру по строке """ + СтруктураРеквизитовДляПоиска + """. Описание ошибки: " + ОписаниеОшибки();
			Отказ		= Истина;
        КонецПопытки;

		//По сформированной структуре ищем реквизиты в метаданных объекта
		//Найденные заполняем переданными значениями или значениями по умолчанию
		Для Каждого РеквизитДляПоиска Из СтруктураРеквизитовДляПоиска Цикл 
			РеквизитОбъекта = МетаданныеОбъектаРеквизиты.Найти(РеквизитДляПоиска.Ключ);
			Если Не РеквизитОбъекта = Неопределено Тогда 
				СтруктураОбъекта.Вставить(РеквизитДляПоиска.Ключ, РеквизитОбъекта.Тип.ПривестиЗначение());
			КонецЕсли;
		КонецЦикла;

	//Если передали структуру
    ИначеЕсли ТипЗнч(СтруктураРеквизитовДляПоиска) = Тип("Структура") И СтруктураРеквизитовДляПоиска.Количество() > 0 Тогда

		//По переданной структуре ищем реквизиты в метаданных объекта
		//Найденные заполняем переданными значениями или значениями по умолчанию
		Для Каждого РеквизитДляПоиска Из СтруктураРеквизитовДляПоиска Цикл 
			РеквизитОбъекта = МетаданныеОбъектаРеквизиты.Найти(РеквизитДляПоиска.Ключ);
			Если Не РеквизитОбъекта = Неопределено Тогда 
				СтруктураОбъекта.Вставить(РеквизитДляПоиска.Ключ, ?(ЗначениеЗаполнено(РеквизитДляПоиска.Значение), РеквизитДляПоиска.Значение, РеквизитОбъекта.Тип.ПривестиЗначение()));
			КонецЕсли;
		КонецЦикла;
		
	//Если СтруктураРеквизитовДляПоиска не заполенна или заполненна не корректно
	Иначе
					
		//Сформируем результирующую структуру со всеми имеющимися у объекта реквизитами
		Для Каждого РеквизитОбъекта Из МетаданныеОбъектаРеквизиты Цикл
			СтруктураОбъекта.Вставить(РеквизитОбъекта.Имя, РеквизитОбъекта.Тип.ПривестиЗначение());
		КонецЦикла;

	КонецЕсли;	
	
	//Проверка необходимости дальнейшей обработки
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	//Определяем список специальных реквизитов объектов
    Если ЭтоСправочник ИЛИ ЭтоПланОбмена ИЛИ ЭтоПВХ ИЛИ ЭтоПланВидовРасчета Тогда
        Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			//TODO Определить значение по умолчанию
			СтруктураОбъекта.Вставить("Код");
        КонецЕсли;
        Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
            СтруктураОбъекта.Вставить("Наименование", "");
        КонецЕсли;
        Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
            Если МетаданныеОбъекта.Иерархический Тогда
				//TODO Определить значение по умолчанию
				СтруктураОбъекта.Вставить("Родитель");
            КонецЕсли;
            Если ЭтоСправочник И (МетаданныеОбъекта.Владельцы.Количество() <> 0) Тогда
				//TODO Определить значение по умолчанию
				СтруктураОбъекта.Вставить("Владелец");
            КонецЕсли;
        КонецЕсли;
    ИначеЕсли ЭтоДокумент Тогда
        Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			ДопустимыеТипы  = Новый ОписаниеТипов(Строка(МетаданныеОбъекта.ТипНомера));
			СтруктураОбъекта.Вставить("Номер", ДопустимыеТипы.ПривестиЗначение());				
        КонецЕсли;
        СтруктураОбъекта.Вставить("Дата", Дата(1,1,1));
    ИначеЕсли ЭтоЗадача Тогда
        Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			ДопустимыеТипы  = Новый ОписаниеТипов(Строка(МетаданныеОбъекта.ТипНомера));
			СтруктураОбъекта.Вставить("Номер", ДопустимыеТипы.ПривестиЗначение());
        КонецЕсли;
       	СтруктураОбъекта.Вставить("Дата", Дата(1,1,1));
        Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
           СтруктураОбъекта.Вставить("Наименование", "");
        КонецЕсли;
    КонецЕсли;

	//Общие реквизиты
	СтруктураОбъекта.Вставить("ПометкаУдаления", Ложь);
	СтруктураОбъекта.Вставить("Ссылка", ПустаяСсылка);

	
	//Обработаем табличные части	
	Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
		//Добавлять табличные части будем с учетом переданной структуры реквизитов
		Если СтруктураРеквизитовДляПоиска = Неопределено Или СтруктураРеквизитовДляПоиска.Свойство(ИмяТабличнойЧасти) Тогда 
			СтруктураОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);
			//СтруктураОбъекта.Вставить(СтруктураТабличнойЧастиОбъекта(ТабличнаяЧасть)); //Объект[ТабличнаяЧасть.Имя].Выгрузить()
		КонецЕсли;
	КонецЦикла;
					
	Возврат СтруктураОбъекта;
	 
КонецФункции

// РеквизитыОбъекта
// Возвращает массив структур с именами и значениями реквизитов произвольных объектов ссылочного типа
// прочитанные из информационной базы.
//
// Параметры:
//  МассивСсылок		- Массив			- Коллекция произвольных ссылок (СправочникСсылка, ДокументСсылка, ПланОбменаСсылка, ПВХ, ЗадачаСсылка)
//											Типы всех элементов массива должны совпадать.
//						- Ссылка			- (СправочникСсылка, ДокументСсылка, ПланОбменаСсылка, ПВХ, ЗадачаСсылка)
//  СтруктураРеквизитов	- Структура 		- Необязательный. В качестве ключа передается имена реквизитов,
//											значения которых необходимо получить.
//						- Строка			- Необязательно. Имена реквизитов, перечисленные через запятую,
//											значения которых необходимо получить.
//	ТекстОшибки					- Строка	- Содержит описание ошибки, в случае возникновения оной.
//	Отказ						- Булево	- Признак возникновения ошибки выполнения.
//
// Возвращаемое значение:
//	Массив			- Коллекция структур, содержащих реквизиты найденных объектов.
//  Массив			- Пустой, если объекты не найдены.
//	Неопределено	- В случае, если по полному имени не удалось найти объект метаданных 
//					или найденный объект не поддерживается подсистемой "Общие методы объектов".
//
Функция РеквизитыОбъекта(Знач МассивСсылок, Знач СтруктураРеквизитов = Неопределено, ТекстОшибки = "", Отказ = Ложь) Экспорт
		
	//Результирующий массив
	МассивСтруктурРеквизитов = Новый Массив;
	
	//Определение типа объектов для получения реквизитов
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() = 0 Тогда 
		Возврат МассивСтруктурРеквизитов;
	ИначеЕсли ТипЗнч(МассивСсылок) = Тип("Массив") Тогда 
		Ссылка = МассивСсылок[0];
	Иначе
		Ссылка = МассивСсылок;
	КонецЕсли;

	//Получение метаданных по Ссылке
	ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
	СтруктураМетаданныхОбъекта = ОбщиеМетодыОбъектовПовтИсп.ОбрабатываемыеМетаданныеПоПолномуИмени(ПолноеИмяОбъектаМетаданных, ТекстОшибки, Отказ);
	
	Если СтруктураМетаданныхОбъекта = Неопределено Тогда 
		ТекстОшибки = "Не удалось найти Объект метаданных по полному имени """ + ПолноеИмяОбъектаМетаданных + """
						|или данный тип метаданных не поддерживает общие конструкторы!";
		Отказ = Истина;
		Возврат Неопределено;	
	КонецЕсли;
	
	ОбъектМетаданных = СтруктураМетаданныхОбъекта.ОбъектМетаданных;	
 	//
	
    ТекстЗапроса = "ВЫБРАТЬ ";
	СтрокаРеквизитов = "";
	СтрокаТабличныхЧастей = "";
	МассивТабличныхЧастей = Новый Массив;
	//Определяем список реквизитов объектов для подстановки в текст запроса
    ПустаяСтруктураОбъекта = СтруктураОбъекта(Ссылка, СтруктураРеквизитов, ТекстОшибки, Отказ);
    
	//Формируем запрос
	Для Каждого Реквизит Из ПустаяСтруктураОбъекта Цикл 
		СтрокаРеквизитов = СтрокаРеквизитов + Реквизит.Ключ + ",";
		//ТабличныеЧасти потребуют дополнительного преобразования в массив структур
		Если ТипЗнч(Реквизит.Значение) = Тип("Массив") Тогда 
			СтрокаТабличныхЧастей = СтрокаТабличныхЧастей + Реквизит.Ключ + ",";
			МассивТабличныхЧастей.Добавить(Реквизит.Ключ);
		КонецЕсли;
	КонецЦикла;

	//Отрезаем последнюю запятую
	СтрокаРеквизитов		= Лев(СтрокаРеквизитов, СтрДлина(СтрокаРеквизитов) - 1);
	СтрокаТабличныхЧастей	= Лев(СтрокаТабличныхЧастей, СтрДлина(СтрокаТабличныхЧастей) - 1);
	
	ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов;
    ТекстЗапроса = ТекстЗапроса + "
        |ИЗ " + ПолноеИмяОбъектаМетаданных + "
        |ГДЕ Ссылка В (&МассивСсылок)";

    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивСтруктурРеквизитов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
				
    Пока Выборка.Следующий() Цикл 
		СтруктураРеквизитов = Новый Структура(СтрокаРеквизитов);
		
		//Заполнение значений реквизитов исключая ТЧ
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка,, СтрокаТабличныхЧастей);
		
		//Заполнение значений табличных частей
		Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
			
			//Проверим существование ТЧ и заполненность результатов запроса
			//МетаданныеТЧ = ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			
			ЭталонСтрокиТабличнойЧасти = СтруктураСтрокиТабличнойЧастиОбъекта(ПолноеИмяОбъектаМетаданных, ИмяТабличнойЧасти, ТекстОшибки, Отказ);
			РезультатЗапросаПоТЧ = Выборка[ИмяТабличнойЧасти];
			
			//Если не удалось создать структуру строки или количество записей = 0
			Если ЭталонСтрокиТабличнойЧасти = Неопределено Или РезультатЗапросаПоТЧ.Пустой() Тогда 
				СтруктураРеквизитов.Вставить(ИмяТабличнойЧасти, Новый Массив);
				Продолжить;
			КонецЕсли;
			
			//Результирующий массив по ТЧ
			МассивСтруктурТабличнойЧасти = Новый Массив;
			//Получим выборку результатов запроса
			ВыборкаТЧ = РезультатЗапросаПоТЧ.Выбрать();
			Пока ВыборкаТЧ.Следующий() Цикл
				//Скопируем пустую структуру
				СтруктураСтрокиТабличнойЧасти = СкопироватьСтруктуру(ЭталонСтрокиТабличнойЧасти);
				//Заполним
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиТабличнойЧасти, ВыборкаТЧ);
				//Добавим в массив
				МассивСтруктурТабличнойЧасти.Добавить(СтруктураСтрокиТабличнойЧасти);				
			КонецЦикла;
			СтруктураРеквизитов.Вставить(ИмяТабличнойЧасти, МассивСтруктурТабличнойЧасти);	
		КонецЦикла;
		//Формировние массива результата
		МассивСтруктурРеквизитов.Добавить(СтруктураРеквизитов);
					
	КонецЦикла;
    
    Возврат МассивСтруктурРеквизитов;
	
КонецФункции //ПолучитьРеквизитыОбъекта()

// ТабличныеЧастиОбъекта
// Возвращает массив имен табличных частей объекта.
//
// Параметры:
//	ПолноеИмяОбъектаМетаданных	- Строка	- Полное имя метаданных для поиска, по которому будет сформирован массив имен табличных частей.
//	ТекстОшибки					- Строка	- Содержит описание ошибки, в случае возникновения оной.
//	Отказ						- Булево	- Признак возникновения ошибки выполнения.
//
// Возвращаемое значение:
//	Массив			- Коллекция имен табличных частей найденного объекта метаданных.
//	Неопределено	- В случае, если по полному имени не удалось найти объект метаданных. 
Функция ТабличныеЧастиОбъекта(ПолноеИмяОбъектаМетаданных, ТекстОшибки = "", Отказ = Ложь) Экспорт
	
	СтруктураОбъектаМетаданных = ОбщиеМетодыОбъектовПовтИсп.ОбрабатываемыеМетаданныеПоПолномуИмени(ПолноеИмяОбъектаМетаданных, ТекстОшибки, Отказ);
	
	Если СтруктураОбъектаМетаданных = Неопределено Тогда 
		ТекстОшибки = "Не удалось найти Объект метаданных по полному имени """ + ПолноеИмяОбъектаМетаданных + """
						|или данный тип метаданных не поддерживает общие конструкторы!";
		Отказ = Истина;
		Возврат Неопределено;	
	КонецЕсли;
	
	Результат = Новый Массив;
	
	//TODO проверить наличие ТЧ
	Для Каждого ТабличнаяЧасть Из СтруктураОбъектаМетаданных.ОбъектМетаданных.ТабличныеЧасти Цикл
		Результат.Добавить(ТабличнаяЧасть.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// СтруктураСтрокиТабличнойЧастиОбъекта
// Создает структуру реквизитов табличной части объекта.
//
// Параметры:
//	ПолноеИмяОбъектаМетаданных	- Строка	- Полное имя объекта метаданных для поиска табличной части, 
//								по которой будет сформирована структура строки.
//	ИмяТабличнойЧасти			- Строка	- Имя табличной части.
//	ТекстОшибки					- Строка	- Содержит описание ошибки, в случае возникновения оной.
//	Отказ						- Булево	- Признак возникновения ошибки выполнения.
//
// Возвращаемое значение:
//	Структура		- Имена и значения по умолчанию реквизитов табличной части.
//	Неопределено	- Если не удалось получить объект метаданных или метаданные ТЧ по имени 
//					или найденный объект не поддерживается подсистемой "Общие методы объектов".
//
Функция СтруктураСтрокиТабличнойЧастиОбъекта(ПолноеИмяОбъектаМетаданных, ИмяТабличнойЧасти, ТекстОшибки = "", Отказ = Ложь)Экспорт

	СтруктураОбъектаМетаданных	= ОбщиеМетодыОбъектовПовтИсп.ОбрабатываемыеМетаданныеПоПолномуИмени(ПолноеИмяОбъектаМетаданных, ТекстОшибки, Отказ);
	МетаданныеТабличнойЧасти	= СтруктураОбъектаМетаданных.ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);

	Если МетаданныеТабличнойЧасти = Неопределено Тогда 
		ТекстОшибки = "В объекте метаданных """ + ПолноеИмяОбъектаМетаданных + """ не найдена табличная часть """ + ИмяТабличнойЧасти + """.";
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

	//Заполнение реквизитов
	СтруктураСтрокиТабличнойЧастиОбъекта = Новый Структура();
	Для Каждого мРеквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
		СтруктураСтрокиТабличнойЧастиОбъекта.Вставить(мРеквизит.Имя, мРеквизит.Тип.ПривестиЗначение());
	КонецЦикла;

	Возврат СтруктураСтрокиТабличнойЧастиОбъекта;

КонецФункции

// ПараметрыЗаписиДокумента
// Формирует структуру параметров для записи документов
//
// Параметры:
//	РежимЗаписи		- РежимЗаписиДокумента		- Необязательный. Позволяет выбрать один из возможных режимов записи.
//												Значение по умолчанию: Запись.
//	РежимПроведения	- РежимПроведенияДокумента	- Необязательный. Позволяет выбрать один из возможных режимов проведения.
// 												Значение по умолчанию: Неоперативный. 
//
// Возвращаемое значение:
//	Структура		- Параметры для записи документа
//
Функция ПараметрыЗаписиДокумента(Знач РежимЗаписи = Неопределено, Знач РежимПроведения = Неопределено)Экспорт 
	
	//Проверим типы
	РежимЗаписи = ?(ТипЗнч(РежимЗаписи) = Тип("РежимЗаписиДокумента"), РежимЗаписи, РежимЗаписиДокумента.Запись);
	РежимПроведения = ?(ТипЗнч(РежимПроведения) = Тип("РежимПроведенияДокумента"), РежимПроведения, РежимПроведенияДокумента.Неоперативный);
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписи);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведения);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

#КонецОбласти


//////////////////////////////////////////////////////////////
//Прочее
//////////////////////////////////////////////////////////////
#Область СлужебныеПроцедурыИФункции

// СкопироватьСтруктуру
// Создает новый экземпляр объекта Структура, заполняет объект данными указанной структуры.
// TODO В Пегасе заменить на вызов ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураИсточник);
//
// Параметры:
//  СтруктураИсточник - Структура - структура, копию которой необходимо получить.
//
// Возвращаемое значение:
//  Структура - копия переданной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого Элемент Из СтруктураИсточник Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДеревоЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, СкопироватьСтруктуру(Элемент.Значение));
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		Иначе
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

#КонецОбласти

