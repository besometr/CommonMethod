Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидаем;
Перем ГенераторТестовыхДанных;
Перем УтвержденияПроверкаТаблиц;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	// Плагин позволяет использовать проверки базовых утверждений
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	// Плагин позволяет использовать проверки текучих утверждений BDD
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	// Плагин позволяет работать с макетами данных
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	// Плагин позволяет использовать процедуры и функции проверки таблиц и табличных документов
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	//"Проверка основных методов работы конструкторов для Документов"
	//Структуры объекта
	НаборТестов.НачатьГруппу("Тесты генерации Структур Объекта", Истина);
	НаборТестов.Добавить("Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_МодульМенеджера", "Создание структуры объекта Документ СпоГруз по умолчанию из Модуля менеджера");
	НаборТестов.Добавить("Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_Конструктор", "Создание структуры объекта Документ СпоГруз по умолчанию из Общего конструктора");
	НаборТестов.Добавить("Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_Идентичны", "Структуры объекта Документ СпоГруз идентичны");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_МодульМенеджера", "Создание структуры объекта Документ СпоГруз по строке из Модуля менеджера");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_Конструктор", "Создание структуры объекта Документ СпоГруз по строке из Общего конструктора");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_Идентичны", "Структуры объекта Документ СпоГруз по строке идентичны");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_МодульМенеджера", "Создание структуры объекта Документ СпоГруз по структуре из Модуля менеджера");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_Конструктор", "Создание структуры объекта Документ СпоГруз по структуре из Общего конструктора");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_Идентичны", "Структуры объекта Документ СпоГруз по структуре идентичны");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера", "Создание структуры объекта Документ СпоГруз со значениями из Модуля менеджера");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор", "Создание структуры объекта Документ СпоГруз со значениями из Общего конструктора");
	НаборТестов.Добавить("Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_Идентичны", "Структуры объекта Документ СпоГруз со значениями идентичны");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	//Структуры строки ТЧ
	НаборТестов.НачатьГруппу("Тесты генерации Структуры Строк табличных частей Объекта", Истина);
	НаборТестов.Добавить("Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_МодульМенеджера", "Создание структуры строки ТЧ Спецификация объекта Документ СпоГруз из Модуля менеджера");
	НаборТестов.Добавить("Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_Конструктор", "Создание структуры строки ТЧ Спецификация объекта Документ СпоГруз из Общего конструктора");
	НаборТестов.Добавить("Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_Идентичны", "Структуры строк ТЧ Спецификация объекта Документ СпоГруз идентичны");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	//Конструкторы
	//Ошибки
	НаборТестов.НачатьГруппу("Тесты конструкторов Объекта споГруз", Истина);
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПоУмолчанию_Документ_споГруз_МодульМенеджера", "Ошибка создания документа СпоГруз по пустой структуре из Модуля менеджера");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПоУмолчанию_Документ_споГруз_Конструктор", "Ошибка создания документа СпоГруз по пустой структуре из Общего конструктора");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПустойГород_Документ_споГруз_МодульМенеджера", "Ошибка создания документа СпоГруз без Города из Модуля менеджера");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПустойГород_Документ_споГруз_Конструктор", "Ошибка создания документа СпоГруз без Города из Общего конструктора");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПустойГородПолучатель_Документ_споГруз_МодульМенеджера", "Ошибка создания документа СпоГруз без ГородаПолучателя из Модуля менеджера");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПустойГородПолучатель_Документ_споГруз_Конструктор", "Ошибка создания документа СпоГруз без ГородаПолучателя из Общего конструктора");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПоИмеющейсяСсылке_Документ_споГруз_МодульМенеджера", "Ошибка создания документа СпоГруз по имеющейся ссылке из Модуля менеджера");
	НаборТестов.Добавить("Тест_ОшибкаСозданияНового_ПоИмеющейсяСсылке_Документ_споГруз_Конструктор", "Ошибка создания документа СпоГруз по имеющейся ссылке из Общего конструктора");

	//Успех
	НаборТестов.Добавить("Тест_СозданиеНового_ПоУмолчаниюСЗаполнением_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз по пустой структуре с заполнением из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ПоУмолчаниюСЗаполнением_Документ_споГруз_Конструктор", "Создание документа СпоГруз по пустой структуре с заполнением из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСтрокиСЗаполнением_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз по строке с заполнением из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСтрокиСЗаполнением_Документ_споГруз_Конструктор", "Создание документа СпоГруз по строке с заполнением из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз по заполненой структуре из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор", "Создание документа СпоГруз по заполненой структуре из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ПоПредопределеннойСсылке_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз по предопределенной ссылке из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ПоПредопределеннойСсылке_Документ_споГруз_Конструктор", "Создание документа СпоГруз по предопределенной ссылке из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_СЗаполнениемТЧ_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз с заполнением ТЧ из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_СЗаполнениемТЧ_Документ_споГруз_Конструктор", "Создание документа СпоГруз с заполнением ТЧ из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ПараметрыЗаписиПоУмолчанию_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз с Параметрами записи по умолчанию из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ПараметрыЗаписиПоУмолчанию_Документ_споГруз_Конструктор", "Создание документа СпоГруз с Параметрами записи по умолчанию из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ПараметрыЗаписиПереопределены_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз с переопределенными Параметрами записи из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ПараметрыЗаписиПереопределены_Документ_споГруз_Конструктор", "Создание документа СпоГруз с переопределенными Параметрами записи из Общего конструктора");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСобственнойСтруктуры_Документ_споГруз_МодульМенеджера", "Создание документа СпоГруз по собственной структуре из Модуля менеджера");
	НаборТестов.Добавить("Тест_СозданиеНового_ИзСобственнойСтруктуры_Документ_споГруз_Конструктор", "Создание документа СпоГруз по собственной структуре из Общего конструктора");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	//Обновление
	НаборТестов.НачатьГруппу("Тесты обновления Объектов споГруз", Истина);
	НаборТестов.Добавить("Тест_ОшибкаОбновленияБезСсылки_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера", "Обновление СпоГруз без Ссылки из Модуля менеджера");
	НаборТестов.Добавить("Тест_ОшибкаОбновленияБезСсылки_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор", "Обновление СпоГруз без Ссылки из Общего конструктора");
	НаборТестов.Добавить("Тест_Обновление_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера", "Обновление СпоГруз из Модуля менеджера");
	НаборТестов.Добавить("Тест_Обновление_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор", "Обновление СпоГруз из Общего конструктора");
	НаборТестов.Добавить("Тест_Обновление_СОчисткойТЧ_Документ_споГруз_МодульМенеджера", "Обновление СпоГруз с очисткой ТЧ из Модуля менеджера");
	НаборТестов.Добавить("Тест_Обновление_СОчисткойТЧ_Документ_споГруз_Конструктор", "Обновление СпоГруз с очисткой ТЧ из Общего конструктора");
	НаборТестов.Добавить("Тест_Обновление_СОбновлениемТЧ_Документ_споГруз_МодульМенеджера", "Обновление СпоГруз с обновлением ТЧ из Модуля менеджера");
	НаборТестов.Добавить("Тест_Обновление_СОбновлениемТЧ_Документ_споГруз_Конструктор", "Обновление СпоГруз с обновлением ТЧ из Общего конструктора");
	НаборТестов.Добавить("Тест_Обновление_СДополнениемТЧ_Документ_споГруз_МодульМенеджера", "Обновление СпоГруз с дополнением ТЧ из Модуля менеджера");
	НаборТестов.Добавить("Тест_Обновление_СДополнениемТЧ_Документ_споГруз_Конструктор", "Обновление СпоГруз с дополнением ТЧ из Общего конструктора");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	//Получение реквизитов
	НаборТестов.НачатьГруппу("Тесты получения реквизитов Объектов споГруз", Истина);
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_споГруз_МодульМенеджера", "Получение реквизитов СпоГруз по умолчанию из Модуля менеджера");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_споГруз_Конструктор", "Получение реквизитов СпоГруз по умолчанию из Общего конструктора");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураОпределена_споГруз_МодульМенеджера", "Получение заданных реквизитов СпоГруз из Модуля менеджера");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураОпределена_споГруз_Конструктор", "Получение заданных реквизитов СпоГруз из Общего конструктора");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_КоллекцияспоГруз_МодульМенеджера", "Получение реквизитов по нескольким СпоГруз по умолчанию из Модуля менеджера");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_КоллекцияспоГруз_Конструктор", "Получение реквизитов по нескольким СпоГруз по умолчанию из Общего конструктора");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураОпределена_КоллекцияспоГруз_МодульМенеджера", "Получение заданных реквизитов по нескольким СпоГруз из Модуля менеджера");
	НаборТестов.Добавить("Тест_ПолучениеРеквизитов_СтруктураОпределена_КоллекцияспоГруз_Конструктор", "Получение заданных реквизитов по нескольким СпоГруз из Общего конструктора");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	//Общие проверки
	НаборТестов.НачатьГруппу("Тесты подсистемы ""ОбщиеМетодыОбъектов""", Истина);
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_Документ", "Получение менеджера объекта Документ");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_Справочник", "Получение менеджера объекта Справочник");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_ПланВидовХарактеристик", "Получение менеджера объекта ПланВидовХарактеристик");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_Задача", "Получение менеджера объекта Задача");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_ПланОбмена", "Получение менеджера объекта ПланОбмена");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_БизнесПроцесс", "Получение менеджера объекта БизнесПроцесс");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_РегистрСведений", "Ошибка получение менеджера объекта РегистрСведений");
	НаборТестов.Добавить("Тест_ПолучениеМенеджераОбъекта_РегистрНакопления", "Ошибка получение менеджера объекта РегистрНакопления");
	НаборТестов.ДобавитьДеструктор("ДеструкторСценария", "Обязательное завершение сценария");
	//
	
	
КонецПроцедуры


/////////////////////////////////////////////////////////
//Тесты

// Получение структур объекта
// Шаблон
// Тест_ПолучениеПустойСтруктурыОбъекта_Документ_споГруз_МодульМенеджера
// Тест_ПолучениеПустойСтруктурыОбъекта_Документ_споГруз_Конструктор

//Проверки структуры объекта споГруз
Процедура ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки)
	
	Ожидаем.Что(СтруктураОбъекта, "Должна быть получена пустая структура объекта. Ошибка: " + ТекстОшибки)
		.ИмеетТип("Структура");		
		
	Ожидаем.Что(СтруктураОбъекта.Свойство("Ссылка"), "Свойство Ссылка является обязательным полем"	)
		.ЭтоИстина();		
		
	Ожидаем.Что(СтруктураОбъекта.Ссылка, "Поле Ссылка должно быть заполненно значением по умолчанию (Документы.споГруз.ПустаяСсылка)")
	    .Существует()
		.ИмеетТип("ДокументСсылка.споГруз");
		
	Ожидаем.Что(СтруктураОбъекта.Свойство("Номер"), "Свойство Номер является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураОбъекта.Свойство("ПометкаУдаления"), "Свойство ПометкаУдаления является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураОбъекта.Свойство("Город"), "Свойство Город является обязательным полем")
		.ЭтоИстина();                        

	Ожидаем.Что(СтруктураОбъекта.Город, "Поле Город должно быть заполненно значением по умолчанию (Справочник.споФилиалы.ПустаяСсылка)")
	    .Существует()
		.ИмеетТип("СправочникСсылка.споФилиалы");
		
	Ожидаем.Что(СтруктураОбъекта.Свойство("ГородПолучатель"), "Свойство ГородПолучатель является обязательным полем")
		.ЭтоИстина();

	Ожидаем.Что(СтруктураОбъекта.ГородПолучатель, "Поле ГородПолучатель должно быть заполненно значением по умолчанию (Справочник.споФилиалы.ПустаяСсылка)")
	    .Существует()
		.ИмеетТип("СправочникСсылка.споФилиалы");
		
КонецПроцедуры

//Структура по умолчанию споГруз Модуль менеджера
Процедура Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_МодульМенеджера()Экспорт 
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(,ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
		
КонецПроцедуры
//Структура по умолчанию споГруз Конструктор
Процедура Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_Конструктор()Экспорт 
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
		
КонецПроцедуры
//Структуры по умолчанию споГруз идентичны
Процедура Тест_СтруктурыПоУмолчаниюОбъекта_Документ_споГруз_Идентичны()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаМ = Документы.споГруз.СтруктураОбъекта(,ТекстОшибки);
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъектаИ = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);
	
	Утверждения.ПроверитьРавенство(ЗначениеВСтрокуВнутр(СтруктураОбъектаМ), ЗначениеВСтрокуВнутр(СтруктураОбъектаИ), "Созданные структуры на клиенте и на сервере отличаются");
	
КонецПроцедуры

//Структура по строке споГруз Модуль менеджера
Процедура Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_МодульМенеджера()Экспорт 
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
		
КонецПроцедуры
//Структура по строке споГруз Конструктор
Процедура Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_Конструктор()Экспорт 
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
	
КонецПроцедуры
//Структуры по строке споГруз идентичны
Процедура Тест_СтруктурыОбъектаИзСтроки_Документ_споГруз_Идентичны()Экспорт
	
	ТекстОшибки = "";
		
	СтрокаРеквизитов = "Город, ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаМ = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаИ = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	Утверждения.ПроверитьРавенство(ЗначениеВСтрокуВнутр(СтруктураОбъектаМ), ЗначениеВСтрокуВнутр(СтруктураОбъектаИ), "Созданные структуры на клиенте и на сервере отличаются");
	
КонецПроцедуры

//Структура по структуре споГруз Модуль менеджера
Процедура Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_МодульМенеджера()Экспорт 
	
	ТекстОшибки = "";
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель");
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
	
КонецПроцедуры
//Структура по структуре споГруз Модуль Конструктор
Процедура Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_Конструктор()Экспорт 
	
	ТекстОшибки = "";
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель");
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
	
КонецПроцедуры
//Структуры по структуре споГруз идентичны
Процедура Тест_СтруктурыОбъектаИзСтруктуры_Документ_споГруз_Идентичны()Экспорт
	
	ТекстОшибки = "";
		
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель");
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаМ = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаИ = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	Утверждения.ПроверитьРавенство(ЗначениеВСтрокуВнутр(СтруктураОбъектаМ), ЗначениеВСтрокуВнутр(СтруктураОбъектаИ), "Созданные структуры на клиенте и на сервере отличаются");
	
КонецПроцедуры

//Структура по структуре со значениями споГруз Модуль менеджера
Процедура Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера()Экспорт 
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
	
	//Доп проверки значений
	Ожидаем.Что(СтруктураОбъекта.Город, "Поле Город должно быть заполненно значением МВ")
	    .Равно(споФилиал_МВ());
		
	
	Ожидаем.Что(СтруктураОбъекта.ГородПолучатель, "Поле ГородПолучатель должно быть заполненно значением СП")
	    .Равно(споФилиал_СП());
		
		
КонецПроцедуры
//Структура по структуре со значениями споГруз Модуль Конструктор
Процедура Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор()Экспорт 
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
	
	//Доп проверки значений
	Ожидаем.Что(СтруктураОбъекта.Город, "Поле Город должно быть заполненно значением МВ")
	    .Равно(споФилиал_МВ());
		
	
	Ожидаем.Что(СтруктураОбъекта.ГородПолучатель, "Поле ГородПолучатель должно быть заполненно значением СП")
	    .Равно(споФилиал_СП());

КонецПроцедуры
//Структуры по структуре со значениями споГруз идентичны
Процедура Тест_СтруктурыОбъектаИзСтруктурыСоЗначениями_Документ_споГруз_Идентичны()Экспорт
	
	ТекстОшибки = "";
		
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаМ = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъектаИ = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	Утверждения.ПроверитьРавенство(ЗначениеВСтрокуВнутр(СтруктураОбъектаМ), ЗначениеВСтрокуВнутр(СтруктураОбъектаИ), "Созданные структуры на клиенте и на сервере отличаются");
	
КонецПроцедуры
//

// Получение структур ТЧ

//Проверки структуры Спецификация объекта споГруз
Процедура ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки)
	
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта, "Должна быть получена пустая структура строки ТЧ Спецификация объекта споГруз. Ошибка: " + ТекстОшибки)
		.Существует()
		.ИмеетТип("Структура");
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("Наименование"), "Свойство Наименование является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("НомерСФ"), "Свойство НомерСФ является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("ДатаСФ"), "Свойство ДатаСФ является обязательным полем")
		.ЭтоИстина();

		
КонецПроцедуры
//Проверки структуры Упаковка объекта споГруз
Процедура ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки)
	
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта, "Должна быть получена пустая структура строки ТЧ Упаковка объекта споГруз. Ошибка: " + ТекстОшибки)
		.Существует()
		.ИмеетТип("Структура");
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("Упаковка"), "Свойство Упаковка является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("Повреждение"), "Свойство Повреждение является обязательным полем")
		.ЭтоИстина();
		
	Ожидаем.Что(СтруктураСтрокиТабличнойЧастиОбъекта.Свойство("Примечание"), "Свойство Примечание является обязательным полем")
		.ЭтоИстина();

		
КонецПроцедуры

//Структура строки Спецификация споГруз Модуль менеджера
Процедура Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_МодульМенеджера()Экспорт 

	ТекстОшибки = "";

	//Получение структуры строки ТЧ объекта споГруз через модуль менеджера
	СтруктураСтрокиТабличнойЧастиОбъекта = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);
	
КонецПроцедуры			
//Структура строки Спецификация споГруз Конструктор
Процедура Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_Конструктор()Экспорт 

	ТекстОшибки = "";
	
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСтрокиТабличнойЧастиОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);

КонецПроцедуры
//Структуры строки Спецификация споГруз идентичны
Процедура Тест_СтруктурыСтрокиТабличнойЧастиОбъекта_Документ_споГруз_Идентичны()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры строки ТЧ объекта споГруз через модуль менеджера
	СтруктураСтрокиТабличнойЧастиОбъектаМ = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСтрокиТабличнойЧастиОбъектаИ = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);
	
	Утверждения.ПроверитьРавенство(ЗначениеВСтрокуВнутр(СтруктураСтрокиТабличнойЧастиОбъектаМ), 
									ЗначениеВСтрокуВнутр(СтруктураСтрокиТабличнойЧастиОбъектаИ), 
									"Созданные структуры на клиенте и на сервере отличаются");
	
КонецПроцедуры
//

// Создание объектов

//Проверка пустой ссылки на споГруз
Процедура ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз)
	
	Ожидаем.Что(сГруз, "Без заполненых основных реквизитов документ Груз записан быть не должен. Конструкторы должны вернуть Неопределено")
		.ЭтоНеопределено();
	
КонецПроцедуры
//Проверка заполненной ссылки на споГруз
Процедура ПроверкаЧто_Документ_споГруз_Создан(сГруз)
	
	Ожидаем.Что(сГруз, "Без заполненых основных реквизитов документ Груз записан быть не должен.")
		.Существует()
		.ИмеетТип("ДокументСсылка.споГруз")
		.Заполнено();
		
	//Основные реквизиты
	Ожидаем.Что(сГруз.Город, "Свойство Город является обязательным реквизитом" )
		.Существует()
	    .ИмеетТип("СправочникСсылка.споФилиалы")
		.Заполнено();
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Свойство ГородПолучатель является обязательным реквизитом" )
		.Существует()
	    .ИмеетТип("СправочникСсылка.споФилиалы")
		.Заполнено();

	Ожидаем.Что(сГруз.Дата, "Свойство Дата является обязательным реквизитом" )
		.Существует()
	    .Заполнено()
		.Больше(НачалоДня(ТекущаяДата()))
		.Меньше(КонецДня(ТекущаяДата()));
		
КонецПроцедуры

//Ошибки
//Ошибка создания споГруз по пустой структуре объекта Модуль менеджера
Процедура Тест_ОшибкаСозданияНового_ПоУмолчанию_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры строки ТЧ объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(, ТекстОшибки);

	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
		
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
		
КонецПроцедуры
//Ошибка создания споГруз по пустой структуре объекта Конструктор
Процедура Тест_ОшибкаСозданияНового_ПоУмолчанию_Документ_споГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
			
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);

	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураОбъекта, ТекстОшибки);
		
	//Создание груза	
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);

	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
		
КонецПроцедуры
//Ошибка создания споГруз без Город Модуль менеджера
Процедура Тест_ОшибкаСозданияНового_ПустойГород_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	СтруктураОбъекта.ГородПолучатель = споФилиал_МВ();
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);

КонецПроцедуры
//Ошибка создания споГруз без Город Конструктор
Процедура Тест_ОшибкаСозданияНового_ПустойГород_Документ_споГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	СтруктураОбъекта.ГородПолучатель = споФилиал_МВ();
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);

КонецПроцедуры
//Ошибка создания споГруз без ГородПолучатель Модуль менеджера
Процедура Тест_ОшибкаСозданияНового_ПустойГородПолучатель_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	СтруктураОбъекта.Город = споФилиал_МВ();
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);

КонецПроцедуры
//Ошибка создания споГруз без ГородПолучатель Конструктор
Процедура Тест_ОшибкаСозданияНового_ПустойГородПолучатель_Документ_споГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	СтруктураОбъекта.Город = споФилиал_МВ();
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);

КонецПроцедуры
//Ошибка создания споГруз по предопределенной, уже имеющейся ссылке Модуль менеджера
Процедура Тест_ОшибкаСозданияНового_ПоИмеющейсяСсылке_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Ссылка - обязательное поле
	Если Не СтруктураОбъекта.Свойство("Ссылка") Тогда 
		ВызватьИсключение("В структуре объекта не найдено свойство Ссылка");
	КонецЕсли;

	//Выберем имеющуюся Ссылку
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	споГруз.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.споГруз КАК споГруз
		|
		|УПОРЯДОЧИТЬ ПО
		|	споГруз.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Ожидаем.Что(РезультатЗапроса.Пустой(), "Для подстановки ссылки должен быть найден хотя бы 1 имеющийся документ груз")
		.Не_().ЕстьИстина();
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	мСсылка = Выборка.Ссылка;
	Ожидаем.Что(мСсылка, "Ссылка на объект должна быть заполненной")
		.Существует()
		.ИмеетТип("ДокументСсылка.споГруз")
		.Заполнено();
	//Поместим сформированную Ссылку в структуру для установки ее в объект.
	СтруктураОбъекта.Ссылка = мСсылка;	
		
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
		
КонецПроцедуры
//Ошибка создания споГруз по предопределенной, уже имеющейся ссылке Конструктор
Процедура Тест_ОшибкаСозданияНового_ПоИмеющейсяСсылке_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Ссылка - обязательное поле
	Если Не СтруктураОбъекта.Свойство("Ссылка") Тогда 
		ВызватьИсключение("В структуре объекта не найдено свойство Ссылка");
	КонецЕсли;

	//Выберем имеющуюся Ссылку
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	споГруз.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.споГруз КАК споГруз
		|
		|УПОРЯДОЧИТЬ ПО
		|	споГруз.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Ожидаем.Что(РезультатЗапроса.Пустой(), "Для подстановки ссылки должен быть найден хотя бы 1 имеющийся документ груз")
		.Не_().ЕстьИстина();
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	мСсылка = Выборка.Ссылка;
	Ожидаем.Что(мСсылка, "Ссылка на объект должна быть заполненной")
		.Существует()
		.ИмеетТип("ДокументСсылка.споГруз")
		.Заполнено();
	//Поместим сформированную Ссылку в структуру для установки ее в объект.
	СтруктураОбъекта.Ссылка = мСсылка;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
	
	
КонецПроцедуры

//Успех
//Создание споГруз с Город и ГородПолучатель структура по умолчанию с заполнением Модуль менеджера
Процедура Тест_СозданиеНового_ПоУмолчаниюСЗаполнением_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(,ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с Город и ГородПолучатель структура по умолчанию с заполнением Конструктор
Процедура Тест_СозданиеНового_ПоУмолчаниюСЗаполнением_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с Город и ГородПолучатель строка с заполнением Модуль менеджера
Процедура Тест_СозданиеНового_ИзСтрокиСЗаполнением_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с Город и ГородПолучатель строка с заполнением Конструктор
Процедура Тест_СозданиеНового_ИзСтрокиСЗаполнением_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с Город и ГородПолучатель структура со значениями Модуль менеджера
Процедура Тест_СозданиеНового_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с Город и ГородПолучатель структура со значениями Конструктор
Процедура Тест_СозданиеНового_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз по предопределенной ссылке Модуль менеджера
Процедура Тест_СозданиеНового_ПоПредопределеннойСсылке_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Ссылка - обязательное поле
	Если Не СтруктураОбъекта.Свойство("Ссылка") Тогда 
		ВызватьИсключение("В структуре объекта не найдено свойство Ссылка");
	КонецЕсли;

	//Сформируем свою Ссылку
	мСсылка = Документы.споГруз.ПолучитьСсылку();
	Ожидаем.Что(мСсылка, "Ссылка на объект должна быть заполненной")
		.Существует()
		.ИмеетТип("ДокументСсылка.споГруз")
		.Заполнено();
	//Поместим сформированную Ссылку в структуру для установки ее в объект.
	СтруктураОбъекта.Ссылка = мСсылка;	
		
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//Проверка ссылки 
	Ожидаем.Что(сГруз, "Ссылка должна быть равнв сформированной нами ранее")
		.Равно(мСсылка);
		
КонецПроцедуры
//Создание споГруз по предопределенной ссылке Конструктор
Процедура Тест_СозданиеНового_ПоПредопределеннойСсылке_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Ссылка - обязательное поле
	Если Не СтруктураОбъекта.Свойство("Ссылка") Тогда 
		ВызватьИсключение("В структуре объекта не найдено свойство Ссылка");
	КонецЕсли;

	//Сформируем свою Ссылку
	мСсылка = Документы.споГруз.ПолучитьСсылку();
	Ожидаем.Что(мСсылка, "Ссылка на объект должна быть заполненной")
		.Существует()
		.ИмеетТип("ДокументСсылка.споГруз")
		.Заполнено();
	//Поместим сформированную Ссылку в структуру для установки ее в объект.
	СтруктураОбъекта.Ссылка = мСсылка;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз с заполнением ТЧ Спецификация Модуль менеджера
Процедура Тест_СозданиеНового_СЗаполнениемТЧ_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через модуль менеджера
	СтруктураСтрокиТабличнойЧастиОбъекта = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);
	
	СтруктураСтрокиТабличнойЧастиОбъекта.Наименование = "Что то там";
	СтруктураСтрокиТабличнойЧастиОбъекта.НомерСФ = "0-10";
	СтруктураСтрокиТабличнойЧастиОбъекта.ДатаСФ = ТекущаяДата();
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСтрокиТабличнойЧастиОбъекта);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Больше(0);		
	
	
КонецПроцедуры
//Создание споГруз с заполнением ТЧ Спецификация Конструктор
Процедура Тест_СозданиеНового_СЗаполнениемТЧ_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСтрокиТабличнойЧастиОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);
	
	СтруктураСтрокиТабличнойЧастиОбъекта.Наименование = "Что то там";
	СтруктураСтрокиТабличнойЧастиОбъекта.НомерСФ = "0-10";
	СтруктураСтрокиТабличнойЧастиОбъекта.ДатаСФ = ТекущаяДата();
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСтрокиТабличнойЧастиОбъекта);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//ТЧ
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Больше(0);
		
КонецПроцедуры
//Создание споГруз с Параметрами записи по умолчанию Модуль менеджера
Процедура Тест_СозданиеНового_ПараметрыЗаписиПоУмолчанию_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(,ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Проведение
	Ожидаем.Что(сГруз.Проведен, "По умолчанию для споГруз режим записи = Проведение" )
		.ЕстьИстина();
	
	
КонецПроцедуры
//Создание споГруз с Параметрами записи по умолчанию Конструктор
Процедура Тест_СозданиеНового_ПараметрыЗаписиПоУмолчанию_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Проведение
	Ожидаем.Что(сГруз.Проведен, "По умолчанию для споГруз режим записи = Проведение" )
		.ЕстьИстина();
	
КонецПроцедуры
//Создание споГруз с переопределенными Параметрами записи Модуль менеджера
Процедура Тест_СозданиеНового_ПараметрыЗаписиПереопределены_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(,ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Параметры записи
	ПараметрыЗаписи = Документы.споГруз.ПараметрыЗаписиДокумента(РежимЗаписиДокумента.Запись);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,, ПараметрыЗаписи, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Проведение
	Ожидаем.Что(сГруз.Проведен, "споГруз режим записи = Запись" )
		.Не_().ЕстьИстина();
	
КонецПроцедуры
//Создание споГруз с переопределенными Параметрами записи Конструктор
Процедура Тест_СозданиеНового_ПараметрыЗаписиПереопределены_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз",, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	
	//Параметры записи
	ПараметрыЗаписи = ОбщиеМетодыОбъектовВызовСервера.КонструкторПараметровЗаписи("Документ.споГруз", РежимЗаписиДокумента.Запись);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,, ПараметрыЗаписи, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Проведение
	Ожидаем.Что(сГруз.Проведен, "споГруз режим записи = Запись" )
		.Не_().ЕстьИстина();

	
КонецПроцедуры
//Создание споГруз по собственной структуре Модуль менеджера
Процедура Тест_СозданиеНового_ИзСобственнойСтруктуры_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураОбъекта = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
//Создание споГруз по собственной структуре Конструктор
Процедура Тест_СозданиеНового_ИзСобственнойСтруктуры_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураОбъекта = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
		
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
	
КонецПроцедуры
	
//Создание споГруз с Дополнительными свойствами Модуль менеджера
//Создание споГруз с Дополнительными свойствами Конструктор
//


// Изменение объектов

//Изменение споГруз без Ссылки вызывает ошибку обновления Модуль менеджера
Процедура Тест_ОшибкаОбновленияБезСсылки_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//Обновление
	СтруктураРеквизитовО = Новый Структура("Город, ГородПолучатель", споФилиал_СП(), споФилиал_МВ());
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитовО, ТекстОшибки);
	//Обновление груза
	сГруз = Документы.споГруз.ОбновитьОбъект(Неопределено, СтруктураОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
	
КонецПроцедуры
//Изменение споГруз без Ссылки вызывает ошибку обновления Конструктор
Процедура Тест_ОшибкаОбновленияБезСсылки_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//Обновление
	СтруктураРеквизитовО = Новый Структура("Город, ГородПолучатель", споФилиал_СП(), споФилиал_МВ());
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитовО, ТекстОшибки);
	//Обновление груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.ОбновитьОбъект(Неопределено, СтруктураОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_НеСоздан(сГруз);
	
КонецПроцедуры
//Изменение споГруз Модуль менеджера
Процедура Тест_Обновление_ИзСтруктурыСоЗначениями_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Город, ГородПолучатель", споФилиал_СП(), споФилиал_МВ());
	
	//Обновление груза
	сГруз = Документы.споГруз.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Обновляли Город = СП" )
		.Равно(споФилиал_СП());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Обновляли ГородПолучатель = МВ" )
		.Равно(споФилиал_МВ());
		
КонецПроцедуры
//Изменение споГруз Конструктор
Процедура Тест_Обновление_ИзСтруктурыСоЗначениями_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтруктураРеквизитов = Новый Структура("Город, ГородПолучатель", споФилиал_МВ(), споФилиал_СП());
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтруктураРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
		//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
		
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Город, ГородПолучатель", споФилиал_СП(), споФилиал_МВ());
	
	//Обновление груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//Доп. реквизиты
	Ожидаем.Что(сГруз.Город, "Обновляли Город = СП" )
		.Равно(споФилиал_СП());
		
	Ожидаем.Что(сГруз.ГородПолучатель, "Обновляли ГородПолучатель = МВ" )
		.Равно(споФилиал_МВ());

КонецПроцедуры
//Изменение ТЧ споГруз Модуль менеджера
Процедура Тест_Обновление_СОчисткойТЧ_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ Спецификация объекта споГруз через модуль менеджера
	СтруктураСпецификация = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
				
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);			
		
	
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	
	//Обновление груза
	сГруз = Документы.споГруз.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(0);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//Изменение ТЧ споГруз Конструктор
Процедура Тест_Обновление_СОчисткойТЧ_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСпецификация = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
		
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	
	//Обновление груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(0);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//Изменение ТЧ споГруз с обновлением Модуль менеджера
Процедура Тест_Обновление_СОбновлениемТЧ_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ Спецификация объекта споГруз через модуль менеджера
	СтруктураСпецификация = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
				
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);			
		
	
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	
	
	//Обновление груза
	сГруз = Документы.споГруз.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(2);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//Изменение ТЧ споГруз с обновлением Конструктор
Процедура Тест_Обновление_СОбновлениемТЧ_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСпецификация = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
		
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	
	//Обновление груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,,, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(2);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//Изменение ТЧ споГруз с дополнением Модуль менеджера
Процедура Тест_Обновление_СДополнениемТЧ_Документ_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ Спецификация объекта споГруз через модуль менеджера
	СтруктураСпецификация = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
				
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);			
		

	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	
	//Обновление груза
	сГруз = Документы.споГруз.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,, Ложь, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(3);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//Изменение ТЧ споГруз с дополнением Конструктор
Процедура Тест_Обновление_СДополнениемТЧ_Документ_споГруз_Конструктор()Экспорт

	ТекстОшибки = "";
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация, Упаковка";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСпецификация = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСпецификация, ТекстОшибки);
	
	СтруктураСпецификация.Наименование = "Что то там";
	СтруктураСпецификация.НомерСФ = "0-10";
	СтруктураСпецификация.ДатаСФ = ТекущаяДата();
	
	//Получение структуры строки ТЧ Упаковка объекта споГруз через модуль менеджера
	СтруктураУпаковка = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Упаковка", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиУпаковкаОбъекта_Документ_споГруз(СтруктураУпаковка, ТекстОшибки);
	
	СтруктураУпаковка.Упаковка = Справочники.споУпаковкаОтправителя.Картон;
	СтруктураУпаковка.Повреждение = Справочники.споПоврежденияУпаковки.БезПовреждений;
	СтруктураУпаковка.Примечание = "Все ок!";
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураОбъекта.Упаковка.Добавить(СтруктураУпаковка);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть заполнена." )
		.Равно(1);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
		
	//Обновление
	СтруктураИзмененийОбъекта = Новый Структура("Спецификация", Новый Массив());
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	СтруктураИзмененийОбъекта.Спецификация.Добавить(СтруктураСпецификация);
	
	//Обновление груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.ОбновитьОбъект(сГруз, СтруктураИзмененийОбъекта,,, Ложь, ТекстОшибки);
	
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
		
	//ТЧ Спецификация
	Ожидаем.Что(сГруз.Спецификация.Количество(), "ТЧ Спецификация должна быть очищена." )
		.Равно(3);		
	//ТЧ Упаковка
	Ожидаем.Что(сГруз.Упаковка.Количество(), "ТЧ Упаковка должна быть заполнена." )
		.Равно(1);
		
КонецПроцедуры
//


// Получение реквизитов объектов

//
Функция СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки = "")
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	//Получение структуры объекта споГруз через модуль менеджера
	СтруктураОбъекта = Документы.споГруз.СтруктураОбъекта(СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через модуль менеджера
	СтруктураСтрокиТабличнойЧастиОбъекта = Документы.споГруз.СтруктураСтрокиТабличнойЧастиОбъекта("Спецификация", ТекстОшибки);
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);
	
	СтруктураСтрокиТабличнойЧастиОбъекта.Наименование = "Что то там";
	СтруктураСтрокиТабличнойЧастиОбъекта.НомерСФ = "0-10";
	СтруктураСтрокиТабличнойЧастиОбъекта.ДатаСФ = ТекущаяДата();
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСтрокиТабличнойЧастиОбъекта);
	
	//Создание груза
	сГруз = Документы.споГруз.СоздатьОбъект(СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	Возврат сГруз;
КонецФункции
//
Функция СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "")
	
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	//Получение структуры объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыОбъекта("Документ.споГруз", СтрокаРеквизитов, ТекстОшибки);
	
	// Проверка структуры
	Если СтруктураОбъекта = Неопределено Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Ожидаем.Что(СтруктураОбъекта.Спецификация, "Структура должна содержать однаименное свойство для ТЧ. Значение должно быть = пустому массиву.")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(0);
		
	//Получение структуры строки ТЧ объекта споГруз через общий конструктор по полному имени метаданных
	СтруктураСтрокиТабличнойЧастиОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторСтруктурыСтрокиТабличнойЧастиОбъекта("Документ.споГруз", "Спецификация", ТекстОшибки);	
	
	ОбщиеПроверкиСтруктурыСтрокиТабличнойЧастиСпецификацияОбъекта_Документ_споГруз(СтруктураСтрокиТабличнойЧастиОбъекта, ТекстОшибки);
	
	СтруктураСтрокиТабличнойЧастиОбъекта.Наименование = "Что то там";
	СтруктураСтрокиТабличнойЧастиОбъекта.НомерСФ = "0-10";
	СтруктураСтрокиТабличнойЧастиОбъекта.ДатаСФ = ТекущаяДата();
	
	//Заполнение
	СтруктураОбъекта.Город = споФилиал_МВ();
	СтруктураОбъекта.ГородПолучатель = споФилиал_СП();
	СтруктураОбъекта.Спецификация.Добавить(СтруктураСтрокиТабличнойЧастиОбъекта);
	
	//Создание груза
	сГруз = ОбщиеМетодыОбъектовВызовСервера.КонструкторОбъекта("Документ.споГруз", СтруктураОбъекта,,, ТекстОшибки);
	
	//Основные проверки
	ПроверкаЧто_Документ_споГруз_Создан(сГруз);
	
	Возврат сГруз;
	
КонецФункции

//Получение структуры по умолчанию споГруз Модуль менеджера
Процедура Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
		
	//Получение данных
	МассивСтруктурРеквизитов = Документы.споГруз.РеквизитыОбъекта(сГруз);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 1 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
		
КонецПроцедуры
//Получение структуры по умолчанию споГруз Конструктор
Процедура Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_споГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	
	//Получение данных
	МассивСтруктурРеквизитов = ОбщиеМетодыОбъектовВызовСервера.РеквизитыОбъекта(сГруз);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 1 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
		
КонецПроцедуры
//Получение заданной структуры споГруз Модуль менеджера
Процедура Тест_ПолучениеРеквизитов_СтруктураОпределена_споГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Создание груза
	сГруз = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	
	//Получение данных
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	МассивСтруктурРеквизитов = Документы.споГруз.РеквизитыОбъекта(сГруз, СтрокаРеквизитов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 1 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
		
КонецПроцедуры
//Получение заданной структуры споГруз Конструктор
Процедура Тест_ПолучениеРеквизитов_СтруктураОпределена_споГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	
	//Получение данных
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	МассивСтруктурРеквизитов = ОбщиеМетодыОбъектовВызовСервера.РеквизитыОбъекта(сГруз, СтрокаРеквизитов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 1 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
	
КонецПроцедуры
//Получение структуры по умолчанию коллекция споГруз Модуль менеджера
Процедура Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_КоллекцияспоГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз1 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	сГруз2 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	сГруз3 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	
	МассивГрузов = Новый Массив;
	МассивГрузов.Добавить(сГруз1);
	МассивГрузов.Добавить(сГруз2);
	МассивГрузов.Добавить(сГруз3);
	
	//Получение данных
	МассивСтруктурРеквизитов = Документы.споГруз.РеквизитыОбъекта(МассивГрузов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 3 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(3);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
КонецПроцедуры
//Получение структуры по умолчанию коллекция споГруз Конструктор
Процедура Тест_ПолучениеРеквизитов_СтруктураПоУмолчанию_КоллекцияспоГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз1 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	сГруз2 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	сГруз3 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	
	МассивГрузов = Новый Массив;
	МассивГрузов.Добавить(сГруз1);
	МассивГрузов.Добавить(сГруз2);
	МассивГрузов.Добавить(сГруз3);
	
	//Получение данных
	МассивСтруктурРеквизитов = ОбщиеМетодыОбъектовВызовСервера.РеквизитыОбъекта(МассивГрузов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 3 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(3);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
	
КонецПроцедуры
//Получение заданной структуры коллекция споГруз Модуль менеджера
Процедура Тест_ПолучениеРеквизитов_СтруктураОпределена_КоллекцияспоГруз_МодульМенеджера()Экспорт
	
	ТекстОшибки = "";
	
	//Создание груза
	сГруз1 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	сГруз2 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	сГруз3 = СоздатьГрузДляПолученияРеквизитов_МодульМенеджера(ТекстОшибки);
	
	МассивГрузов = Новый Массив;
	МассивГрузов.Добавить(сГруз1);
	МассивГрузов.Добавить(сГруз2);
	МассивГрузов.Добавить(сГруз3);
	
	//Получение данных
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	МассивСтруктурРеквизитов = Документы.споГруз.РеквизитыОбъекта(МассивГрузов, СтрокаРеквизитов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 3 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(3);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
	
КонецПроцедуры
//Получение заданной структуры коллекция споГруз Конструктор
Процедура Тест_ПолучениеРеквизитов_СтруктураОпределена_КоллекцияспоГруз_Конструктор()Экспорт
	
	ТекстОшибки = "";
			
	//Создание груза
	сГруз1 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	сГруз2 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	сГруз3 = СоздатьГрузДляПолученияРеквизитов_Конструктор(ТекстОшибки = "");
	
	МассивГрузов = Новый Массив;
	МассивГрузов.Добавить(сГруз1);
	МассивГрузов.Добавить(сГруз2);
	МассивГрузов.Добавить(сГруз3);
	
	//Получение данных
	СтрокаРеквизитов = "Город, ГородПолучатель, Спецификация";
	МассивСтруктурРеквизитов = ОбщиеМетодыОбъектовВызовСервера.РеквизитыОбъекта(МассивГрузов, СтрокаРеквизитов);
	
	Ожидаем.Что(МассивСтруктурРеквизитов, "Массив структур должен содержать 3 структуру")
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(3);

	СтруктураРеквизитовОбъекта = МассивСтруктурРеквизитов[0];
	ОбщиеПроверкиПустойСтруктурыОбъекта_СпоГруз(СтруктураРеквизитовОбъекта, ТекстОшибки);
	
	//Доп. реквизиты
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Город, "Устанавливали Город = МВ" )
		.Равно(споФилиал_МВ());
		
	Ожидаем.Что(СтруктураРеквизитовОбъекта.ГородПолучатель, "Устанавливали ГородПолучатель = СП" )
		.Равно(споФилиал_СП());
		
	//ТЧ
	Ожидаем.Что(СтруктураРеквизитовОбъекта.Спецификация, "ТЧ Спецификация должна быть заполнена." )
		.Существует()
		.ИмеетТип("Массив")
	    .ИмеетДлину(1);
	
КонецПроцедуры
//


//Общие проверки

// Конструктор менеджера объекта Документ
Процедура Тест_ПолучениеМенеджераОбъекта_Документ()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "Документ.споГруз";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""Документ"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Конструктор менеджера объекта Справочник
Процедура Тест_ПолучениеМенеджераОбъекта_Справочник()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "Справочник.споФилиалы";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""Справочник"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Конструктор менеджера объекта ПланВидовХарактеристик
Процедура Тест_ПолучениеМенеджераОбъекта_ПланВидовХарактеристик()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "ПланВидовХарактеристик.СвойстваОбъектов";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""ПланВидовХарактеристик"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Конструктор менеджера объекта Задача
Процедура Тест_ПолучениеМенеджераОбъекта_Задача()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "Задача.ЗадачиПользователя";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""Задача"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Конструктор менеджера объекта ПланОбмена
Процедура Тест_ПолучениеМенеджераОбъекта_ПланОбмена()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "ПланОбмена.рсжBCP_ПланОбмена";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""ПланОбмена"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Конструктор менеджера объекта БизнесПроцесс
Процедура Тест_ПолучениеМенеджераОбъекта_БизнесПроцесс()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "БизнесПроцесс.споБизнесПроцесс";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""БизнесПроцесс"" ")
		.Существует();
		
	Если Отказ Тогда 
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры
// Ошибка конструктора менеджера объекта РегистрСведений
Процедура Тест_ПолучениеМенеджераОбъекта_РегистрСведений()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "РегистрСведений.APDEX_Настройки";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""РегистрСведений"" ")
		.Не_().Существует();
		
КонецПроцедуры
// Ошибка конструктора менеджера объекта РегистрНакопления
Процедура Тест_ПолучениеМенеджераОбъекта_РегистрНакопления()Экспорт 
	
	ПолноеИмяМетаданныхОбъекта = "РегистрНакопления.ВзаиморасчетыСИМ";
	ТекстОшибки = "";
	Отказ = Ложь;
	МенеджерОбъекта = ОбщиеМетодыОбъектовВызовСервера.КонструкторМенеджераОбъекта(ПолноеИмяМетаданныхОбъекта, ТекстОшибки, Отказ);
	
	Ожидаем.Что(МенеджерОбъекта, "Удалось получить модуль менеджера для поддерживаемого типа объекта метаданных ""РегистрНакопления"" ")
		.Не_().Существует();


КонецПроцедуры



//ДеструкторСценария
Процедура ДеструкторСценария()Экспорт 
	
КонецПроцедуры